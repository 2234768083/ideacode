<?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE mapper
                PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="nuc.edu.mapper.OrdersMapper">
    <!--订单查询关联用户的resultMap
	将整个查询的结果映射到cn.itcast.mybatis.po.Orders中-->
<resultMap id="OrdersUserResultMap" type="nuc.edu.pojo.Orders">
    <!-- 配置映射的订单信息 -->
    <!-- id：指定查询列中的唯一标识，订单信息的中的唯 一标识，如果有多个列组成唯一标识，配置多个id
        column：订单信息的唯一标识列
        property：订单信息的唯一标识 列所映射到Orders中哪个属性
      -->
    <id column="id" property="id"/>
    <result column="user_id" property="userId"/>
    <result column="number" property="number"/>
    <result column="createtime" property="createtime"/>
    <result column="note" property="note"/>
    <!-- 配置映射的关联的用户信息 -->
    <!-- association：用于映射关联查询单个对象的信息
    property：要将关联查询的用户信息映射到Orders中哪个属性
     -->
    <association property="user"  javaType="User">
        <!-- id：关联查询用户的唯 一标识
        column：指定唯一标识用户信息的列
        javaType：映射到user的哪个属性
         -->
        <id column="user_id" property="id"/>
        <result column="user_name" property="userName"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>

    </association>
</resultMap>
    <!-- 订单及订单明细的resultMap
	使用extends继承，不用在中配置订单信息和用户信息的映射
	 -->
    <resultMap type="nuc.edu.pojo.Orders" id="OrdersAndOrderDetailResultMap" extends="OrdersUserResultMap">
        <!-- 订单信息 -->
        <!-- 用户信息 -->
        <!-- 使用extends继承，不用在中配置订单信息和用户信息的映射 -->
        <!-- 订单明细信息
        一个订单关联查询出了多条明细，要使用collection进行映射
        collection：对关联查询到多条记录映射到集合对象中
        property：将关联查询到多条记录映射到cn.itcast.mybatis.po.Orders哪个属性
        ofType：指定映射到list集合属性中pojo的类型
         -->
        <collection property="orderDetails" ofType="orderDetail">
            <!-- id：订单明细唯一标识
            property:要将订单明细的唯 一标识 映射到cn.itcast.mybatis.po.Orderdetail的哪个属性
              -->
            <id column="orderdetail_id" property="id"/>
            <result column="items_id" property="items_id"/>
            <result column="items_num" property="items_num"/>
            <result column="orders_id" property="orders_id"/>
        </collection>
    </resultMap>
    <resultMap id="UserAndItemsResultMap" type="User">
        <!-- 查询用户及购买的商品 -->
        <id column="id" property="id"/>
        <result column="user_name" property="userName"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>
        <result column="birthday" property="birthday"/>
        <!-- 订单信息一个用户对应多个订单，使用collection映射-->
        <collection property="ordersList" ofType="Orders">
        <id column="id" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
            <result column="note" property="note"/>
            <result column="orderName" property="orderName"/>
            <!-- 订单明细一个订单包括多个明细 -->
            <collection property="orderDetails" ofType="orderDetail">
                <id column="orderdetail_id" property="id"/>
                <result column="items_id" property="items_id"/>
                <result column="items_num" property="items_num"/>
                <result column="orders_id" property="orders_id"/>
                <!-- 商品信息一个订单明细对应一个商品-->
                <association property="items" javaType="nuc.edu.pojo.Items">
                <id column="items_id" property="id"/>
                    <result column="items_name" property="name"/>
                    <result column="items_detail" property="detail"/>
                    <result column="items_price" property="price"/>
                </association>
            </collection>
        </collection>
    </resultMap>

    <!-- 延迟加载的resultMap -->
    <resultMap type="Orders" id="OrdersUserLazyLoadingResultMap">
    <!--对订单信息进行映射配置  -->
    <id column="id" property="id"/>
    <result column="user_id" property="userId"/>
    <result column="number" property="number"/>
    <result column="createtime" property="createtime"/>
    <result column="note" property="note"/>
    <!-- 实现对用户信息进行延迟加载
    select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
    要使用userMapper.xml中findUserById完成根据用户id(user_id)用户信息的查询，如果findUserById不在本mapper中需要前边加namespace
    column：订单信息中关联用户信息查询的列，是user_id
    关联查询的sql理解为：
    SELECT orders.*,(SELECT username FROM USER WHERE orders.user_id = user.id)username,
	(SELECT sex FROM USER WHERE orders.user_id = user.id)sex
	 FROM orders
			 -->
        <association property="user"  javaType="nuc.edu.pojo.User"
                     select="nuc.edu.mapper.UserMapper.findById" column="user_id">
            <!-- 实现对用户信息进行延迟加载 -->
        </association>
    </resultMap>
<!--resultType结果映射的java对象类型 -->
<select id="findOrderById" parameterType="int" resultType="Orders">
    select * from orders where id=#{id}
  </select>
    <!-- 根据订单名称模糊查询,可能返回多个查询结果
    模糊条件需要使用${}:表示拼接sql串，将接收到的参数内容不加任何修饰拼接到sql中。
    使用${}拼接sql，会引入sql注入
    ${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value-->
    <select id="findOrderByName" parameterType="java.lang.String" resultType="nuc.edu.pojo.Orders">
        SELECT * from orders where orderName like '%${value}%'
    </select>
    <!--添加用户
    parameterType：指定输入参数类型是pojo（包括用户信息）
    #{}中指定pojo的属性名，接收到pojo对象的属性名，mybatis通过OGNL获取对象的属性值

    useGeneratedKeys="true" keyProperty="id" -->
<insert id="insertOrder" useGeneratedKeys="true" keyProperty="id"  parameterType="nuc.edu.pojo.Orders" >
        insert into orders(user_id,number,createtime,note) values(#{userId},#{number},#{createtime},#{note})
    </insert>
    <delete id="deleteOrder" parameterType="java.lang.Integer">
        delete from orders where id=#{id}
    </delete>
    <!--根据id更新用户
     分析：需要传入用户的id，需要传入用户的更新信息
     parameterType指定user对象，包括id和更新信息
     #{id}:从输入user对象中获取id属相值-->
    <update id="updateOrder" parameterType="nuc.edu.pojo.Orders">
       update user set user_id=#{userId},orderName=#{orderName}, note=#{note}, createtime=#{createtime},number=#{number}
       where id=#{id}
    </update>

  <!--  <select id="findOrderUser" resultType="nuc.edu.pojo.OrdersCustom">
        SELECT orders.*,`user`.user_name,`user`.sex,`user`.address from orders INNER JOIN `user` where orders.user_id=`user`.id
    </select>-->
    <select id="findOrderUser" resultMap="OrdersUserResultMap">
        SELECT orders.*,`user`.username,`user`.sex,`user`.address from orders INNER JOIN `user` where orders.user_id=`user`.id
    </select>
    <!--一对多查询-->
    <select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap" >
        SELECT
          orders.*,
          USER.username,
          USER.sex,
          USER.address,
          orderdetail.id orderdetail_id,
          orderdetail.items_id,
          orderdetail.items_num,
          orderdetail.orders_id
        FROM
            orders,
            USER,
            orderdetail
        WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id
    </select>
    <select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
        SELECT
  orders.*,
  USER.username,
  USER.sex,
  USER.address,
  orderdetail.id orderdetail_id,
  orderdetail.items_id,
  orderdetail.items_num,
  orderdetail.orders_id,
  items.name items_name,
  items.detail items_detail,
  items.price items_price
FROM
  orders,
  USER,
  orderdetail,
  items
WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id
    </select>
   <!--懒加载示例-->
    <select id="findOrdersUserLazyLoading" resultMap="OrdersUserLazyLoadingResultMap">
        select * from orders
    </select>
    <select id="findOrderId" parameterType="int" resultType="nuc.edu.pojo.Orders">
        select * from orders where user_id=#{id}
    </select>
</mapper>